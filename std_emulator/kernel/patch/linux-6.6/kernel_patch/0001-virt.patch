diff --git a/arch/arm/boot/Makefile b/arch/arm/boot/Makefile
index abd6a2889..24942e93c 100644
--- a/arch/arm/boot/Makefile
+++ b/arch/arm/boot/Makefile
@@ -21,7 +21,7 @@ endif
 PHYS_OFFSET := $(CONFIG_PHYS_OFFSET)
 export ZRELADDR PARAMS_PHYS PHYS_OFFSET
 
-targets := Image zImage xipImage bootpImage uImage
+targets := Image zImage xipImage bootpImage uImage zImage-dtb
 
 ifeq ($(CONFIG_XIP_KERNEL),y)
 
@@ -62,6 +62,11 @@ $(obj)/zImage:	$(obj)/compressed/vmlinux FORCE
 
 endif
 
+$(obj)/zImage-dtb:	$(obj)/zImage FORCE
+	@cat $(obj)/zImage > $@
+	@$(kecho) '  Kernel: $@ is ready'
+
+
 ifneq ($(LOADADDR),)
   UIMAGE_LOADADDR=$(LOADADDR)
 else
@@ -72,6 +77,7 @@ else
   endif
 endif
 
+UIMAGE_LOADADDR=0x80008000
 check_for_multiple_loadaddr = \
 if [ $(words $(UIMAGE_LOADADDR)) -ne 1 ]; then \
 	echo 'multiple (or no) load addresses: $(UIMAGE_LOADADDR)'; \
@@ -80,8 +86,7 @@ if [ $(words $(UIMAGE_LOADADDR)) -ne 1 ]; then \
 	false; \
 fi
 
-$(obj)/uImage:	$(obj)/zImage FORCE
-	@$(check_for_multiple_loadaddr)
+$(obj)/uImage:	$(obj)/zImage-dtb FORCE
 	$(call if_changed,uimage)
 
 $(obj)/bootp/bootp: $(obj)/zImage FORCE
diff --git a/include/linux/memcheck.h b/include/linux/memcheck.h
index 000000000..087cd760e
--- /dev/null
+++ b/include/linux/memcheck.h
@@ -0,0 +1,22 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ *  include/linux/memcheck.h
+ *
+ *  Copyright (c) 2022 Huawei Technologies Co., Ltd.
+ */
+#ifndef _MEMCHECK_H
+#define _MEMCHECK_H
+
+#ifdef CONFIG_MEMTRACE_ASHMEM
+void init_ashmem_process_info(void);
+#else
+static inline void init_ashmem_process_info(void) {}
+#endif
+
+#ifdef CONFIG_PURGEABLE_ASHMEM
+void init_purgeable_ashmem_trigger(void);
+#else
+static inline void init_purgeable_ashmem_trigger(void) {}
+#endif
+#endif /* _MEMCHECK_H */
+
diff --git a/include/linux/memcg_policy.h b/include/linux/memcg_policy.h
new file mode 100644
index 000000000000..2323532777e8
--- /dev/null
+++ b/include/linux/memcg_policy.h
@@ -0,0 +1,47 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * include/linux/memcg_policy.h
+ *
+ * Copyright (c) 2020-2022 Huawei Technologies Co., Ltd.
+ *
+ */
+#ifndef _MEMCG_POLICY_H
+#define _MEMCG_POLICY_H
+
+struct mem_cgroup;
+struct pglist_data;
+struct scan_control;
+
+
+extern struct list_head score_head;
+extern bool score_head_inited;
+extern rwlock_t score_list_lock;
+extern struct cgroup_subsys memory_cgrp_subsys;
+#ifdef CONFIG_HYPERHOLD_FILE_LRU
+void shrink_anon_memcg(struct pglist_data *pgdat,
+               struct mem_cgroup *memcg, struct scan_control *sc,
+               unsigned long *nr);
+bool shrink_node_hyperhold(struct pglist_data *pgdat, struct scan_control *sc);
+#endif /* CONFIG_HYPERHOLD_FILE_LRU */
+
+#ifdef CONFIG_HYPERHOLD_MEMCG
+struct mem_cgroup *get_next_memcg(struct mem_cgroup *prev);
+void get_next_memcg_break(struct mem_cgroup *memcg);
+void memcg_app_score_update(struct mem_cgroup *target);
+
+struct memcg_reclaim {
+       atomic64_t app_score;
+       atomic64_t ub_ufs2zram_ratio;
+#ifdef CONFIG_HYPERHOLD_ZSWAPD
+       atomic_t ub_zram2ufs_ratio;
+       atomic_t ub_mem2zram_ratio;
+       atomic_t refault_threshold;
+       /* anon refault */
+       unsigned long long reclaimed_pagefault;
+#endif
+};
+#define MAX_APP_SCORE 1000
+#endif
+
+
+#endif /* _LINUX_MEMCG_POLICY_H */
diff --git a/include/linux/mm_purgeable.h b/include/linux/mm_purgeable.h
new file mode 100644
index 000000000000..57264d38d5fc
--- /dev/null
+++ b/include/linux/mm_purgeable.h
@@ -0,0 +1,77 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2022 Huawei Device Co., Ltd.
+ */
+
+#ifndef __MM_PURGEABLE_MEM_H
+#define __MM_PURGEABLE_MEM_H
+
+#ifdef CONFIG_MEM_PURGEABLE
+
+void mm_init_uxpgd(struct mm_struct *mm);
+void mm_clear_uxpgd(struct mm_struct *mm);
+bool lock_uxpte(struct vm_area_struct *vma, unsigned long addr);
+void unlock_uxpte(struct vm_area_struct *vma, unsigned long addr);
+vm_fault_t do_uxpte_page_fault(struct vm_fault *vmf, pte_t *entry);
+bool uxpte_set_present(struct vm_area_struct *vma, unsigned long addr);
+void uxpte_clear_present(struct vm_area_struct *vma, unsigned long addr);
+
+/*
+ * mm_purg_pages_info: get purgeable pages count of @mm
+ * @mm:        [in]    pointer to mm
+ * @total_purg_pages:  [out]   total purgeable pages of @mm
+ * @pined_purg_pages:  [out]   pined purgeable pages of @mm
+ * If @mm is NULL, return with doing nothing.
+ * If @total_purg_pages and @pined_purg_pages are both NULL, return with doing nothing.
+ * If one of @total_purg_pages and @pined_purg_pages is NULL, other one will be counted.
+ */
+void mm_purg_pages_info(struct mm_struct *mm, unsigned long *total_purg_pages,
+       unsigned long *pined_purg_pages);
+
+/*
+ * purg_pages_info: get global purgeable pages in system
+ * @total_purg_pages:  [out]   total purgeable pages in system
+ * @pined_purg_pages:  [out]   pined purgeable pages in system
+ * If @total_purg_pages and @pined_purg_pages are both NULL, return with doing nothing.
+ * If one of @total_purg_pages and @pined_purg_pages is NULL, other one will be counted.
+ */
+void purg_pages_info(unsigned long *total_purg_pages, unsigned long *pined_purg_pages);
+
+#else /* CONFIG_MEM_PURGEABLE */
+
+static inline void mm_init_uxpgd(struct mm_struct *mm) {}
+
+static inline void mm_clear_uxpgd(struct mm_struct *mm) {}
+
+static inline bool lock_uxpte(struct vm_area_struct *vma,
+       unsigned long addr)
+{
+       return false;
+}
+
+static inline void unlock_uxpte(struct vm_area_struct *vma,
+       unsigned long addr) {}
+
+static inline vm_fault_t do_uxpte_page_fault(struct vm_fault *vmf,
+       pte_t *entry)
+{
+       return 0;
+}
+
+static inline bool uxpte_set_present(struct vm_area_struct *vma,
+       unsigned long addr)
+{
+       return false;
+}
+
+static inline void uxpte_clear_present(struct vm_area_struct *vma,
+       unsigned long addr) {}
+
+static inline void mm_purg_pages_info(struct mm_struct *mm,
+       unsigned long *total_purg_pages, unsigned long *pined_purg_pages) {}
+
+static inline void purg_pages_info(unsigned long *total_purg_pages,
+       unsigned long *pined_purg_pages) {}
+#endif /* CONFIG_MEM_PURGEABLE */
+#endif /* __MM_PURGEABLE_MEM_H */
+
diff --git a/include/linux/reclaim_acct.h b/include/linux/reclaim_acct.h
new file mode 100644
index 000000000000..3f638cbecb65
--- /dev/null
+++ b/include/linux/reclaim_acct.h
@@ -0,0 +1,48 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * include/linux/reclaim_acct.h
+ *
+ * Copyright (c) 2022 Huawei Technologies Co., Ltd.
+ */
+
+#ifndef _RECLAIM_ACCT_H
+#define _RECLAIM_ACCT_H
+
+#include <linux/sched.h>
+#include <linux/shrinker.h>
+
+/* RA is the abbreviation of reclaim accouting */
+enum reclaimacct_stubs {
+       RA_RECLAIM = 0,
+       RA_DRAINALLPAGES,
+       RA_SHRINKFILE,
+       RA_SHRINKANON,
+       RA_SHRINKSLAB,
+       NR_RA_STUBS
+};
+
+enum reclaim_type {
+       DIRECT_RECLAIMS = 0,
+       KSWAPD_RECLAIM,
+       ZSWAPD_RECLAIM,
+       RECLAIM_TYPES
+};
+
+#ifdef CONFIG_RECLAIM_ACCT
+static inline bool is_system_reclaim(enum reclaim_type type)
+{
+       return (type == KSWAPD_RECLAIM || type == ZSWAPD_RECLAIM);
+}
+
+void reclaimacct_tsk_init(struct task_struct *tsk);
+void reclaimacct_init(void);
+
+void reclaimacct_start(enum reclaim_type type, struct reclaim_acct *ra);
+void reclaimacct_end(enum reclaim_type type);
+
+void reclaimacct_substage_start(enum reclaimacct_stubs stub);
+void reclaimacct_substage_end(enum reclaimacct_stubs stub, unsigned long freed,
+                               const struct shrinker *shrinker);
+#endif
+
+#endif /* _RECLAIM_ACCT_H */
diff --git a/include/linux/xpm.h b/include/linux/xpm.h
new file mode 100644
index 000000000000..9501d48ce524
--- /dev/null
+++ b/include/linux/xpm.h
@@ -0,0 +1,99 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright (c) 2023 Huawei Device Co., Ltd.
+ */
+
+#ifndef _XPM_H
+#define _XPM_H
+
+#include <linux/mm.h>
+#include <linux/types.h>
+#include <linux/printk.h>
+#include <linux/xpm_types.h>
+#include <linux/hck/lite_hck_xpm.h>
+
+/**
+ * when inodes are destroyed, the corresponding cache must be destroyed
+ */
+static inline void xpm_delete_cache_node_hook(struct inode *file_node)
+{
+       CALL_HCK_LITE_HOOK(xpm_delete_cache_node_lhck, file_node);
+}
+
+/**
+ * check whether input address range is out of the xpm region
+ */
+static inline bool xpm_region_outer_hook(unsigned long addr_start,
+       unsigned long addr_end, unsigned long flags)
+{
+       bool ret = true;
+
+       CALL_HCK_LITE_HOOK(xpm_region_outer_lhck, addr_start,
+               addr_end, flags, &ret);
+       return ret;
+}
+
+/**
+ * get unmapped area in xpm region
+ */
+static inline unsigned long xpm_get_unmapped_area_hook(unsigned long addr,
+       unsigned long len, unsigned long map_flags,
+       unsigned long unmapped_flags)
+{
+       unsigned long ret = 0;
+
+       CALL_HCK_LITE_HOOK(xpm_get_unmapped_area_lhck, addr, len,
+               map_flags, unmapped_flags, &ret);
+       return ret;
+}
+
+/*
+ * check the confliction of a page's xpm flags, make sure a process will
+ * not map any RO page into a writable vma or a WT page into a execuable/XPM
+ * memory region.
+ */
+static inline vm_fault_t xpm_integrity_check_hook(struct vm_area_struct *vma,
+       unsigned int vflags, unsigned long addr, struct page *page)
+{
+       vm_fault_t ret = 0;
+
+       CALL_HCK_LITE_HOOK(xpm_integrity_check_lhck, vma, vflags,
+               addr, page, &ret);
+       return ret;
+}
+
+static inline
+vm_fault_t xpm_integrity_validate_hook(struct vm_area_struct *vma,
+       unsigned int vflags, unsigned long addr, struct page *page)
+{
+       vm_fault_t ret = 0;
+
+       CALL_HCK_LITE_HOOK(xpm_integrity_validate_lhck, vma, vflags,
+               addr, page, &ret);
+       return ret;
+}
+
+static inline
+void xpm_integrity_update_hook(struct vm_area_struct *vma,
+       unsigned int vflags, struct page *page)
+{
+       CALL_HCK_LITE_HOOK(xpm_integrity_update_lhck, vma, vflags, page);
+}
+
+static inline bool xpm_integrity_check_one_page_merge(struct page *page,
+       struct page *kpage)
+{
+       bool ret = true;
+
+       CALL_HCK_LITE_HOOK(xpm_integrity_equal_lhck, page, kpage, &ret);
+       return ret;
+}
+
+#ifdef CONFIG_ARM64
+#define pte_user_mkexec(oldpte, ptent) \
+       ((!pte_user_exec(oldpte) && pte_user_exec(ptent)))
+#else
+#define pte_user_mkexec(oldpte, ptent) 1
+#endif
+
+#endif /* _XPM_H */
diff --git a/include/linux/xpm_types.h b/include/linux/xpm_types.h
new file mode 100644
index 000000000000..31dd2d25c192
--- /dev/null
+++ b/include/linux/xpm_types.h
@@ -0,0 +1,21 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright (c) 2023 Huawei Device Co., Ltd.
+ */
+
+#ifndef _XPM_TYPES_H
+#define _XPM_TYPES_H
+
+#include <linux/types.h>
+
+struct xpm_region {
+       unsigned long addr_start; /* start adress of xpm region */
+       unsigned long addr_end;   /* end address of xpm region */
+};
+
+struct cs_info {
+       uint32_t id_type;
+       uint32_t ownerid;
+};
+
+#endif /* _XPM_TYPES_H */
\ No newline at end of file
diff --git a/include/linux/zswapd.h b/include/linux/zswapd.h
new file mode 100644
index 000000000000..214fc061a3b3
--- /dev/null
+++ b/include/linux/zswapd.h
@@ -0,0 +1,50 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * include/linux/zswapd.h
+ *
+ * Copyright (c) 2020-2022 Huawei Technologies Co., Ltd.
+ */
+
+#ifndef _ZSWAPD_H
+#define _ZSWAPD_H
+
+enum {
+       CACHE_SIZE,
+       SWAP_SIZE,
+       CACHE_PAGE,
+       SWAP_PAGE,
+       CACHE_FAULT,
+       SWAP_FAULT,
+       READ_SIZE,
+       WRITE_SIZE,
+};
+
+struct group_swap_ops {
+       u64 (*group_read)(u16 gid, u64 req_size, void *priv);
+       u64 (*group_write)(u16 gid, u64 req_size, void *priv);
+       u64 (*group_data_size)(u16 gid, int type, void *priv);
+};
+
+struct group_swap_device {
+       void *priv;
+       struct group_swap_ops *ops;
+       struct list_head list;
+};
+
+#ifdef CONFIG_HYPERHOLD_ZSWAPD
+extern int zswapd_run(int nid);
+extern void zswapd_stop(int nid);
+extern void zswapd_status_show(struct seq_file *m);
+extern void wake_all_zswapd(void);
+extern void set_snapshotd_init_flag(unsigned int val);
+extern pid_t get_zswapd_pid(void);
+extern unsigned long long get_free_swap_threshold(void);
+extern struct group_swap_device *register_group_swap(struct group_swap_ops *ops, void *priv);
+extern void unregister_group_swap(struct group_swap_device *gsdev);
+
+#ifdef CONFIG_HYPERHOLD_DEBUG
+extern void memcg_eswap_info_show(struct seq_file *m);
+#endif
+#endif
+
+#endif /* _LINUX_ZSWAPD_H */
diff --git a/fs/Kconfig b/fs/Kconfig
index 62daaaf85830..562a57bc7d04 100644
--- a/fs/Kconfig
+++ b/fs/Kconfig
@@ -51,7 +51,6 @@ source "fs/btrfs/Kconfig"
 source "fs/nilfs2/Kconfig"
 source "fs/f2fs/Kconfig"
 source "fs/zonefs/Kconfig"
-source "fs/proc/memory_security/Kconfig"
 
 endif # BLOCK
 
@@ -129,8 +128,6 @@ config FILE_LOCKING
 
 source "fs/crypto/Kconfig"
 
-source "fs/code_sign/Kconfig"
-
 source "fs/verity/Kconfig"
 
 source "fs/notify/Kconfig"
diff --git a/fs/Makefile b/fs/Makefile
index d04ef3afb7ff..8b9107451817 100644
--- a/fs/Makefile
+++ b/fs/Makefile
@@ -30,7 +30,6 @@ obj-$(CONFIG_USERFAULTFD)	+= userfaultfd.o
 obj-$(CONFIG_AIO)               += aio.o
 obj-$(CONFIG_FS_DAX)		+= dax.o
 obj-$(CONFIG_FS_ENCRYPTION)	+= crypto/
-obj-$(CONFIG_SECURITY_CODE_SIGN)	+= code_sign/
 obj-$(CONFIG_FS_VERITY)		+= verity/
 obj-$(CONFIG_FILE_LOCKING)      += locks.o
 obj-$(CONFIG_BINFMT_MISC)	+= binfmt_misc.o
diff --git a/fs/proc/Makefile b/fs/proc/Makefile
index 04a0dd7256c2..bd08616ed8ba 100644
--- a/fs/proc/Makefile
+++ b/fs/proc/Makefile
@@ -34,4 +34,3 @@ proc-$(CONFIG_PROC_VMCORE)	+= vmcore.o
 proc-$(CONFIG_PRINTK)	+= kmsg.o
 proc-$(CONFIG_PROC_PAGE_MONITOR)	+= page.o
 proc-$(CONFIG_BOOT_CONFIG)	+= bootconfig.o
-obj-$(CONFIG_MEMORY_SECURITY) += memory_security/
diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h
index 3ed1e637e30f..d6c39d959a08 100644
--- a/include/linux/page-flags.h
+++ b/include/linux/page-flags.h
@@ -512,8 +512,8 @@ PAGEFLAG(Checked, checked, PF_NO_COMPOUND)	   /* Used by some filesystems */
 PAGEFLAG(XPMReadonly, xpm_readonly, PF_HEAD)
 PAGEFLAG(XPMWritetainted, xpm_writetainted, PF_HEAD)
 #else
-PAGEFLAG_FALSE(XPMReadonly)
-PAGEFLAG_FALSE(XPMWritetainted)
+PAGEFLAG_FALSE(XPMReadonly,XPMReadonly)
+PAGEFLAG_FALSE(XPMWritetainted,XPMWritetainted)
 #endif
 
 /* Xen */
@@ -641,7 +641,7 @@ PAGEFLAG_FALSE(VmemmapSelfHosted, vmemmap_self_hosted)
 #ifdef CONFIG_MEM_PURGEABLE
 PAGEFLAG(Purgeable, purgeable, PF_ANY)
 #else
-PAGEFLAG_FALSE(Purgeable)
+PAGEFLAG_FALSE(Purgeable,Purgeable)
 #endif
 
 /*
diff --git a/include/trace/events/mmflags.h b/include/trace/events/mmflags.h
index 5078d1dfc..4289da3ea 100644
--- a/include/trace/events/mmflags.h
+++ b/include/trace/events/mmflags.h
@@ -138,9 +138,7 @@ IF_HAVE_PG_HWPOISON(hwpoison)						\
 IF_HAVE_PG_IDLE(idle)							\
 IF_HAVE_PG_IDLE(young)							\
 IF_HAVE_PG_ARCH_X(arch_2)						\
-IF_HAVE_PG_ARCH_X(arch_3)						\
-IF_HAVE_PG_ARCH_X(xpm_readonly)						\
-IF_HAVE_PG_ARCH_X(xpm_writetainted)
+IF_HAVE_PG_ARCH_X(arch_3)
 
 #define show_page_flags(flags)						\
 	(flags) ? __print_flags(flags, "|",				\
diff --git a/kernel/Makefile b/kernel/Makefile
index 3947122d618b..3cb8c5963d92 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -156,5 +156,5 @@ quiet_cmd_genikh = CHK     $(obj)/kheaders_data.tar.xz
       cmd_genikh = $(CONFIG_SHELL) $(srctree)/kernel/gen_kheaders.sh $@
 $(obj)/kheaders_data.tar.xz: FORCE
 	$(call cmd,genikh)
-
+ccflags-y += -Wno-incompatible-pointer-types
 clean-files := kheaders_data.tar.xz kheaders.md5
diff --git a/kernel/sched/rtg/Makefile b/kernel/sched/rtg/Makefile
index 4d55523d1f32..9a4d402819af 100755
--- a/kernel/sched/rtg/Makefile
+++ b/kernel/sched/rtg/Makefile
@@ -1,3 +1,4 @@
 # SPDX-License-Identifier: GPL-2.0
 obj-$(CONFIG_SCHED_RTG) += rtg.o
 obj-$(CONFIG_SCHED_RTG_FRAME) += frame_rtg.o rtg_ctrl.o
+ccflags-y += -Wno-strict-prototypes
diff --git a/kernel/watchdog.c b/kernel/watchdog.c
index c904872be06c..f8cd35384b19 100644
--- a/kernel/watchdog.c
+++ b/kernel/watchdog.c
@@ -542,7 +542,7 @@ void watchdog_enable(unsigned int cpu)
 {
 	struct hrtimer *hrtimer = this_cpu_ptr(&watchdog_hrtimer);
 	struct completion *done = this_cpu_ptr(&softlockup_completion);
-	unsigned int *enabled = this_cpu_ptr(&watchdog_en);
+	unsigned int *enabled = this_cpu_ptr(&watchdog_enable);
 
 	WARN_ON_ONCE(cpu != smp_processor_id());
 
@@ -580,7 +580,7 @@ void watchdog_enable(unsigned int cpu)
 void watchdog_disable(unsigned int cpu)
 {
 	struct hrtimer *hrtimer = per_cpu_ptr(&watchdog_hrtimer, cpu);
-	unsigned int *enabled = per_cpu_ptr(&watchdog_en, cpu);
+	unsigned int *enabled = per_cpu_ptr(&watchdog_enable, cpu);
 
 	if (!*enabled)
 		return;
@@ -605,7 +605,7 @@ void watchdog_disable(unsigned int cpu)
 
 bool watchdog_configured(unsigned int cpu)
 {
-	return *per_cpu_ptr(&watchdog_en, cpu);
+	return *per_cpu_ptr(&watchdog_enable, cpu);
 }
 
 static int softlockup_stop_fn(void *data)
diff --git a/security/Kconfig b/security/Kconfig
index 89e5dbcb46e0..52c9af08ad35 100644
--- a/security/Kconfig
+++ b/security/Kconfig
@@ -193,9 +193,7 @@ source "security/loadpin/Kconfig"
 source "security/yama/Kconfig"
 source "security/safesetid/Kconfig"
 source "security/lockdown/Kconfig"
-source "security/xpm/Kconfig"
 source "security/landlock/Kconfig"
-source "security/container_escape_detection/Kconfig"
 
 source "security/integrity/Kconfig"
 
diff --git a/security/Makefile b/security/Makefile
index 1fbed3e27..18121f8f8 100644
--- a/security/Makefile
+++ b/security/Makefile
@@ -4,7 +4,6 @@
 #
 
 obj-$(CONFIG_KEYS)			+= keys/
-subdir-$(CONFIG_SECURITY_CONTAINER_ESCAPE_DETECTION) += container_escape_detection
 
 # always enable default capabilities
 obj-y					+= commoncap.o
@@ -24,9 +23,7 @@ obj-$(CONFIG_SECURITY_SAFESETID)       += safesetid/
 obj-$(CONFIG_SECURITY_LOCKDOWN_LSM)	+= lockdown/
 obj-$(CONFIG_CGROUPS)			+= device_cgroup.o
 obj-$(CONFIG_BPF_LSM)			+= bpf/
-obj-$(CONFIG_SECURITY_XPM)		+= xpm/
 obj-$(CONFIG_SECURITY_LANDLOCK)		+= landlock/
-obj-$(CONFIG_SECURITY_CONTAINER_ESCAPE_DETECTION) += container_escape_detection/
 
 # Object integrity file lists
 obj-$(CONFIG_INTEGRITY)			+= integrity/
